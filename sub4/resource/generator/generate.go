package main

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"os"
	"strings"
)

//go:generate go run generate.go

func main() {
	const inputFileName = "../locale.ja.json"
	const outputFileName = "../constants.go"
	const outputPackageName = "resource"

	// JSONファイルを読み込む
	jsonFile, err := os.Open(inputFileName)
	if err != nil {
		log.Fatalf("Failed to open JSON file %s: %v", inputFileName, err)
	}
	defer jsonFile.Close()

	// JSONファイルの内容を読み込む
	byteValue, err := io.ReadAll(jsonFile)
	if err != nil {
		log.Fatalf("Failed to read JSON file %s: %v", inputFileName, err)
	}

	// JSONデータをパース
	var result map[string]interface{}
	if err := json.Unmarshal(byteValue, &result); err != nil {
		log.Fatalf("Failed to unmarshal JSON data: %v", err)
	}

	// トップレベルの一つ下の階層のキー名を取得
	keys := getKeys(result)

	// 定数として定義するGoコードを生成
	constants := generateConstants(keys, outputPackageName)

	// 生成されたコードをファイルに書き込む
	if err := os.WriteFile(outputFileName, []byte(constants), 0644); err != nil {
		log.Fatalf("Failed to write constants file %s: %v", outputFileName, err)
	}

	fmt.Printf("constants.go ファイルが生成されました。\n")
}

// getKeys retrieves the keys from the top-level of the JSON map.
func getKeys(m map[string]interface{}) []string {
	keys := []string{}
	for key := range m {
		keys = append(keys, key)
	}
	return keys
}

// generateConstants generates Go code for the constants.
func generateConstants(keys []string, packageName string) string {
	constants := "// Code generated by go generate; DO NOT EDIT.\n"
	constants += fmt.Sprintf("package %s\n\nconst (\n", packageName)
	for _, key := range keys {
		constants += fmt.Sprintf("\t%s = \"%s\"\n", toCamelCase(key), key)
	}
	constants += ")\n"
	return constants
}

// toCamelCase converts snake_case to CamelCase.
func toCamelCase(s string) string {
	parts := strings.Split(s, "_")
	for i, part := range parts {
		parts[i] = strings.Title(part)
	}
	return strings.Join(parts, "")
}
